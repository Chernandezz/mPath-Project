// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mPathProject.Infrastructure.Persistence;

#nullable disable

namespace mPathProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250129190932_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("mPathProject.Domain.Entities.Admission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Admissions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AdmissionDate = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnosis = "Flu",
                            DoctorId = 1L,
                            Observation = "Mild symptoms",
                            PatientId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AdmissionDate = new DateTime(2023, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnosis = "Broken Arm",
                            DoctorId = 2L,
                            Observation = "Needs surgery",
                            PatientId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AdmissionDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnosis = "Migraine",
                            DoctorId = 1L,
                            Observation = "Severe headaches",
                            PatientId = 1L
                        });
                });

            modelBuilder.Entity("mPathProject.Domain.Entities.Discharge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AdmissionId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionId");

                    b.ToTable("Discharges");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AdmissionId = 1L,
                            Amount = 100.00m,
                            DischargeDate = new DateTime(2023, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = true,
                            Treatment = "Antibiotics"
                        },
                        new
                        {
                            Id = 2L,
                            AdmissionId = 2L,
                            Amount = 500.00m,
                            DischargeDate = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = false,
                            Treatment = "Surgery"
                        },
                        new
                        {
                            Id = 3L,
                            AdmissionId = 3L,
                            Amount = 75.00m,
                            DischargeDate = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = false,
                            Treatment = "Painkillers"
                        });
                });

            modelBuilder.Entity("mPathProject.Domain.Entities.Doctor", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            FirstName = "John",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            FirstName = "Jane",
                            LastName = "Smith"
                        });
                });

            modelBuilder.Entity("mPathProject.Domain.Entities.Patient", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "123 Main St",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            Observations = "Diabetic",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = 2L,
                            Address = "456 Elm St",
                            FirstName = "Bob",
                            LastName = "Brown",
                            Observations = "Asthma",
                            PhoneNumber = "0987654321"
                        });
                });

            modelBuilder.Entity("mPathProject.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "doctor1@hospital.com",
                            Password = "AQAAAAIAAYagAAAAEMPv0sp+FoVDuxBgcsym2p7fRtW3+em2g2W7wd0pgNFKwmXtkjCFcJIEyy2cmXK6pw==",
                            UserRole = "Doctor"
                        },
                        new
                        {
                            Id = 2L,
                            Email = "doctor2@hospital.com",
                            Password = "AQAAAAIAAYagAAAAEMPv0sp+FoVDuxBgcsym2p7fRtW3+em2g2W7wd0pgNFKwmXtkjCFcJIEyy2cmXK6pw==",
                            UserRole = "Doctor"
                        },
                        new
                        {
                            Id = 3L,
                            Email = "admin@hospital.com",
                            Password = "AQAAAAIAAYagAAAAEHAgp0HFG9qc9eOr9W15Dp/qcrk3rbaCDo97hBui3SIlwim0ojzgn8lUQxBwEyWIaQ==",
                            UserRole = "Admin"
                        },
                        new
                        {
                            Id = 4L,
                            Email = "patient1@hospital.com",
                            Password = "AQAAAAIAAYagAAAAEMPv0sp+FoVDuxBgcsym2p7fRtW3+em2g2W7wd0pgNFKwmXtkjCFcJIEyy2cmXK6pw==",
                            UserRole = "Patient"
                        },
                        new
                        {
                            Id = 5L,
                            Email = "patient2@hospital.com",
                            Password = "AQAAAAIAAYagAAAAEMPv0sp+FoVDuxBgcsym2p7fRtW3+em2g2W7wd0pgNFKwmXtkjCFcJIEyy2cmXK6pw==",
                            UserRole = "Patient"
                        });
                });

            modelBuilder.Entity("mPathProject.Domain.Entities.Admission", b =>
                {
                    b.HasOne("mPathProject.Domain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mPathProject.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("mPathProject.Domain.Entities.Discharge", b =>
                {
                    b.HasOne("mPathProject.Domain.Entities.Admission", "Admission")
                        .WithMany()
                        .HasForeignKey("AdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admission");
                });

            modelBuilder.Entity("mPathProject.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("mPathProject.Domain.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("mPathProject.Domain.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("mPathProject.Domain.Entities.Patient", b =>
                {
                    b.HasOne("mPathProject.Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("mPathProject.Domain.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("mPathProject.Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
